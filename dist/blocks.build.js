!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){var r=n(15),o=n(16),a=n(17),c=n(19);e.exports=function(e,t){return r(e)||o(e,t)||a(e,t)||c()},e.exports.default=e.exports,e.exports.__esModule=!0},,function(e,t,n){e.exports=n(20)},function(e,t){function n(e,t,n,r,o,a,c){try{var i=e[a](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(o,a){var c=e.apply(t,r);function i(e){n(c,o,a,i,l,"next",e)}function l(e){n(c,o,a,i,l,"throw",e)}i(void 0)}))}},e.exports.default=e.exports,e.exports.__esModule=!0},,,,,,,,,function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,n.apply(this,arguments)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},,function(e,t,n){e.exports=n(44)},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);c=!0);}catch(e){i=!0,o=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw o}}return a}},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=n(18);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function i(e,t,n,r){var o=t&&t.prototype instanceof s?t:s,a=Object.create(o.prototype),c=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return k()}for(n.method=o,n.arg=a;;){var c=n.delegate;if(c){var i=g(c,n);if(i){if(i===u)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=l(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===u)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}(e,n,c),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=i;var u={};function s(){}function f(){}function p(){}var m={};m[o]=function(){return this};var d=Object.getPrototypeOf,h=d&&d(d(_([])));h&&h!==t&&n.call(h,o)&&(m=h);var y=p.prototype=s.prototype=Object.create(m);function v(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function w(e,t){var r;this._invoke=function(o,a){function c(){return new t((function(r,c){!function r(o,a,c,i){var u=l(e[o],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,c,i)}),(function(e){r("throw",e,c,i)})):t.resolve(f).then((function(e){s.value=e,c(s)}),(function(e){return r("throw",e,c,i)}))}i(u.arg)}(o,a,r,c)}))}return r=r?r.then(c,c):c()}}function g(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,g(e,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function b(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(b,this),this.reset(!0)}function _(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:k}}function k(){return{value:void 0,done:!0}}return f.prototype=y.constructor=p,p.constructor=f,p[c]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},v(w.prototype),w.prototype[a]=function(){return this},e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var c=new w(i(t,n,r,o),a);return e.isGeneratorFunction(n)?c:c.next().then((function(e){return e.done?e.value:c.next()}))},v(y),y[c]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=_,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return c.type="throw",c.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],c=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var i=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(i&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(i){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var c=a?a.completion:{};return c.type=e,c.arg=t,a?(this.method="next",this.next=a.finallyLoc,u):this.complete(c)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),u},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),u}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:_(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";e.exports=n(22)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(23),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,c=o?Symbol.for("react.portal"):60106,i=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,m=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var w={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||w}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||w}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=b.prototype;var _=E.prototype=new x;_.constructor=E,r(_,b.prototype),_.isPureReactComponent=!0;var k={current:null},S=Object.prototype.hasOwnProperty,N={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},c=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(c=""+t.key),t)S.call(t,r)&&!N.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),s=0;s<l;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:a,type:e,key:c,ref:i,props:o,_owner:k.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var L=/\/+/g,C=[];function O(e,t,n,r){if(C.length){var o=C.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>C.length&&C.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var i=typeof t;"undefined"!==i&&"boolean"!==i||(t=null);var l=!1;if(null===t)l=!0;else switch(i){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case c:l=!0}}if(l)return r(o,t,""===n?"."+R(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var s=n+R(i=t[u],u);l+=e(i,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),u=0;!(i=t.next()).done;)l+=e(i=i.value,s=n+R(i,u++),r,o);else if("object"===i)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?$(e,r,n,(function(e){return e})):null!=e&&(j(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(L,"$&/")+"/")+n)),r.push(e))}function $(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(L,"$&/")+"/"),I(e,M,t=O(t,a,r,o)),P(t)}var B={current:null};function U(){var e=B.current;if(null===e)throw Error(v(321));return e}var F={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return $(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,A,t=O(null,null,t,n)),P(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return $(e,t,null,(function(e){return e})),t},only:function(e){if(!j(e))throw Error(v(143));return e}},t.Component=b,t.Fragment=i,t.Profiler=u,t.PureComponent=E,t.StrictMode=l,t.Suspense=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),c=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(c=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!N.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){u=Array(s);for(var f=0;f<s;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:a,type:e.type,key:c,ref:i,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=j,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return U().useCallback(e,t)},t.useContext=function(e,t){return U().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return U().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return U().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return U().useLayoutEffect(e,t)},t.useMemo=function(e,t){return U().useMemo(e,t)},t.useReducer=function(e,t,n){return U().useReducer(e,t,n)},t.useRef=function(e){return U().useRef(e)},t.useState=function(e){return U().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function c(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=c(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var f=0;f<i.length;f++)a.call(n,i[f])&&(l[i[f]]=n[i[f]])}}return l}},,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);n(45),n(47);var r=wp.i18n.__,o=wp.blockEditor.RichText;(0,wp.blocks.registerBlockType)("ctct-bcb/intro",{title:r("Intro Block"),icon:"editor-aligncenter",category:"common",attributes:{body:{type:"array",source:"children",selector:".intro_body"}},edit:function(e){var t=e.attributes,n=(e.className,e.setAttributes);return wp.element.createElement("div",{className:"container intro"},wp.element.createElement(o,{onChange:function(e){return n({body:e})},value:t.body,multiline:"p",placeholder:"Your intro text"}))},save:function(e){var t=e.attributes;return wp.element.createElement("div",{className:"intro container container-sm"},wp.element.createElement("div",{className:"intro_content"},wp.element.createElement("div",{className:"intro_body"},t.body)))}});var a=n(0),c=n.n(a),i=wp.element.useState,l=wp.components.Button,u=function(e){var t,n=e.props;t=!(n.classLabel!=n.activeState);var r=i(t),o=c()(r,2),a=o[0],u=o[1],s=n.setter;return wp.element.createElement(l,{key:n.label.toLowerCase(),id:n.classLabel+"-"+n.type,className:"".concat(n.type,"-button customizer-button"),onClick:function(e){s(e),u(!a)},"data-active":a,value:n.classLabel},n.label)},s=(n(48),n(49),wp.i18n.__),f=wp.blockEditor,p=f.RichText,m=f.MediaUpload,d=f.PlainText,h=wp.blocks.registerBlockType,y=wp.components,v=y.Button,w=y.ButtonGroup;h("ctct-bcb/cta-hero-block",{title:s("CTA Hero"),icon:"align-left",category:"common",edit:function(e){var t=e.attributes,n=e.setAttributes;!function(e){Object.keys(e).map((function(r){t.key||n({key:e[r]})}))}({theme:"light",width:"lg"});var r=function(e){n({theme:e.target.value})},o=function(e){n({width:e.target.value})},a=[{type:"theme",setter:r,label:"Light",classLabel:"light",activeState:t.theme},{type:"theme",setter:r,label:"Dark",classLabel:"dark",activeState:t.theme}],c=[{type:"width",setter:o,label:"Large",classLabel:"lg",activeState:t.width},{type:"width",setter:o,label:"Medium",classLabel:"main",activeState:t.width}],i=function(e){return e.map((function(e){return wp.element.createElement(u,{props:e})}))},l=function(e){return t.imageUrl?wp.element.createElement("img",{src:t.imageUrl,onClick:e,className:"image"}):wp.element.createElement("div",{className:"button-container"},wp.element.createElement(v,{onClick:e,className:"button button-large"},"Select image"))};return wp.element.createElement("div",null,wp.element.createElement((function(){return wp.element.createElement("div",{className:"flex row afc jfsb"},wp.element.createElement(w,{className:"theme-buttons customizer"},i(a)),wp.element.createElement(w,{className:"width-buttons customizer"},i(c)))}),null),wp.element.createElement("section",{className:"".concat(t.theme," cta-hero flex row afc jfc container container-").concat(t.width)},wp.element.createElement("div",{className:"item_3_5"},wp.element.createElement(m,{onSelect:function(e){e.sizes.hasOwnProperty("ctaHero")?n({imageUrl:e.sizes.ctaHero.url}):n({imageUrl:e.sizes.full.url}),n({imageAlt:e.alt})},type:"image",value:t.imageID,render:function(e){var t=e.open;return l(t)}})),wp.element.createElement("div",{className:"flex col item_2_5 cta-content__side"},wp.element.createElement(d,{onChange:function(e){return n({title:e})},value:t.title,placeholder:"Title",className:"heading"}),wp.element.createElement(p,{onChange:function(e){return n({content:e})},value:t.content,multiline:"p",placeholder:"Content"}),wp.element.createElement("div",{className:"flex row afc cta-hero__button"},wp.element.createElement(p,{onChange:function(e){return n({link:e})},value:t.link,placeholder:"Link"}),wp.element.createElement("i",{class:"fas fa-chevron-circle-right"})))))},save:function(){return null}});n(50),n(51);var g=wp.i18n.__,b=wp.blocks.registerBlockType,x=wp.components,E=x.Button,_=x.ToggleControl,k=wp.blockEditor,S=k.RichText,N=k.MediaUpload,T=k.PlainText;b("ctct-bcb/image-text-split",{title:g("Image Text Split"),icon:"align-right",category:"common",edit:function(e){var t=e.attributes,n=e.setAttributes,r=function(e){return t.imageUrl?wp.element.createElement("img",{src:t.imageUrl,onClick:e,className:"image imgfix"}):wp.element.createElement("div",{className:"button-container"},wp.element.createElement(E,{onClick:e,className:"button button-large"},g("Select image")))},o=function(e){return e.sizes.textImageSplit?e.sizes.textImageSplit.url:e.sizes.full.url};return wp.element.createElement("div",null,wp.element.createElement(_,{label:"Image Left",checked:t.imageLeft,onChange:function(){n({imageLeft:!t.imageLeft})}}),wp.element.createElement("section",{className:"text-image-split flex row afc jfc container container-main"+(t.imageLeft?" imageLeft":" imageRight")},wp.element.createElement("section",{className:"image-side flex item_2_5"},wp.element.createElement(N,{onSelect:function(e){console.log(e),n({imageAlt:e.alt,imageUrl:o(e)})},type:"image",value:t.imageID,render:function(e){var t=e.open;return r(t)}})),wp.element.createElement("section",{className:"text-side item_3_5"},wp.element.createElement(T,{className:"eyebrow",value:t.eyebrow,onChange:function(e){n({eyebrow:e})},placeholder:"Eyebrow Title",tagName:"span"}),wp.element.createElement(T,{className:"title",value:t.title,onChange:function(e){n({title:e})},placeholder:"Title",tagName:"h3"}),wp.element.createElement(S,{className:"text-half",value:t.content,onChange:function(e){return n({content:e})},tagName:"p",placeholder:"Enter some text here"}))))},save:function(){return null}});n(52),n(53);var j=wp.i18n.__,L=wp.blocks.registerBlockType,C=(wp.components.Spinner,wp.data.withSelect,wp.serverSideRender);L("ctct-bcb/recent-videos",{title:j("Recent Videos"),icon:"feedback",category:"common",edit:function(e){return wp.element.createElement(C,{block:"ctct-bcb/recent-videos",attributes:e.attributes})},save:function(){return null}});n(54),n(55);var O=wp.i18n.__,P=wp.blockEditor.RichText;(0,wp.blocks.registerBlockType)("ctct-bcb/what-is-answer",{title:O("What Is - Answer Block"),icon:"yes-alt",category:"common",edit:function(e){var t=e.attributes,n=e.setAttributes;return wp.element.createElement("div",{className:"container intro"},wp.element.createElement(P,{onChange:function(e){return n({content:e})},value:t.content,multiline:"p",placeholder:"Your intro text"}))},save:function(){return null}});n(56),n(57),n(58);var I=wp.i18n.__,R=wp.blocks.registerBlockType,A=wp.serverSideRender;R("ctct-bcb/home-recent-posts",{title:I("Home Recent Posts"),icon:"feedback",category:"common",edit:function(e){return wp.element.createElement(A,{block:"ctct-bcb/home-recent-posts",attributes:e.attributes})},save:function(){return null}});n(59),n(60),n(61);var M=wp.i18n.__,$=wp.blocks.registerBlockType,B=wp.serverSideRender;$("ctct-bcb/home-featured-posts",{title:M("Home Featured Posts"),icon:"feedback",category:"common",edit:function(e){return wp.element.createElement(B,{block:"ctct-bcb/home-featured-posts",attributes:e.attributes})},save:function(){return null}});n(62),n(63),n(64);var U=wp.i18n.__,F=wp.blocks.registerBlockType,q=wp.serverSideRender;F("ctct-bcb/home-featured-authors",{title:U("Home - Featured Authors"),icon:"groups",category:"common",edit:function(e){return wp.element.createElement(q,{block:"ctct-bcb/home-featured-authors",attributes:e.attributes})},save:function(){return null}});n(65),n(66),n(67);var z=wp.i18n.__,H=wp.blocks.registerBlockType,G=wp.blockEditor,D=(G.RichText,G.MediaUpload),V=G.PlainText,Y=wp.editor.InspectorControls,J=wp.components,W=J.PanelBody,K=J.Button;J.ButtonGroup,wp.serverSideRender;H("ctct-bcb/home-newsletter-signup",{title:z("Home Newsletter Signup"),icon:"feedback",category:"common",edit:function(e){var t=e.attributes,n=e.setAttributes,r=function(e){return t.imageUrl?wp.element.createElement("img",{src:t.imageUrl,onClick:e,className:"image"}):wp.element.createElement("div",{className:"button-container"},wp.element.createElement(K,{onClick:e,className:"button button-large"},"Select image"))};return wp.element.createElement("div",null,wp.element.createElement(Y,null,wp.element.createElement(W,null,wp.element.createElement(D,{onSelect:function(e){n({imageUrl:e.sizes.full.url,imageAlt:e.alt}),console.log(t)},type:"image",value:t.imageID,render:function(e){var t=e.open;return r(t)}}))),wp.element.createElement("div",{className:"home-newsletter-signup form-container flex col afc",style:{backgroundImage:t.imageUrl}},wp.element.createElement("h2",{className:"cta"},wp.element.createElement(V,{onChange:function(e){return n({title:e})},value:t.title,placeholder:"Title",className:"cta"})),wp.element.createElement("form",{id:"subscribe",className:"signup-form-actual-form signup-form-actual-form-footer flex row nowrap","accept-charset":"utf-8",action:"https://cloud.c.constantcontact.com/jmmlsubscriptions/coi_verify",method:"GET",target:"_blank"},wp.element.createElement("input",{id:"subbox",className:"newsletter-email-field newsletter-email-field-footer",maxlength:"255",name:"email",required:"required",type:"text",placeholder:"Enter your email address"}),wp.element.createElement("input",{name:"sub",type:"hidden",value:"1"}),wp.element.createElement("input",{name:"method",type:"hidden",value:"JMML_hints_tips"}),wp.element.createElement("input",{id:"page",name:"page",type:"hidden",value:""}),wp.element.createElement("input",{id:"subbutton",className:"item_2_7 submit_optin_form",type:"submit",value:"Sign up"}))))},save:function(){return null}});var Q=n(3),X=n.n(Q),Z=n(2),ee=n.n(Z),te=(n(21),function(){var e=X()(ee.a.mark((function e(){return ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",window.fetch("/wp-json/wp/v2/industry").then((function(e){return e.json()})).then((function(e){return e})));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()),ne=function(){var e=X()(ee.a.mark((function e(){return ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",window.fetch("/wp-json/wp/v2/categories").then((function(e){return e.json()})).then((function(e){return e})));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),re=function(e){var t;return"categories"===e.tax?t=4:"industry"===e.tax&&(t=5),window.fetch("".concat(e.rest,"&per_page=").concat(t)).then((function(e){return e.json()})).then((function(e){return e}))},oe=wp.element,ae=oe.useState,ce=oe.useEffect,ie=function(e){var t=ae(!0),n=c()(t,2),r=(n[0],n[1]),o=ae(!0),a=c()(o,2),i=a[0],l=a[1];return ce((function(){e.terms.length&&(l(e.terms.map((function(t){return t.id==e.selectedTerm?wp.element.createElement("option",{"data-name":t.id,value:t._links["wp:post_type"][0].href,dangerouslySetInnerHTML:{__html:t.name},selected:!0}):wp.element.createElement("option",{"data-name":t.id,value:t._links["wp:post_type"][0].href,dangerouslySetInnerHTML:{__html:t.name}})}))),r(!1))}),[e.terms]),wp.element.createElement("div",null,wp.element.createElement("label",{for:"industry-select"},e.taxType),wp.element.createElement("select",{name:"industry-select",id:"industry-select",onChange:function(t){console.log("data",t.target.options[t.target.selectedIndex].dataset.name),e.onChange(t.target.value,t.target.options[t.target.selectedIndex].dataset.name)}},i))},le=n(12),ue=n.n(le),se=wp.element,fe=se.useState,pe=se.useEffect,me=function(e){var t=fe(e.selected.value),n=c()(t,2),r=(n[0],n[1]);return pe((function(){}),[]),console.log("selectProps",e),wp.element.createElement("div",null,wp.element.createElement("label",{for:"taxonomy-select"},"Choose a Taxonomy:"),wp.element.createElement("select",{name:"taxonomy-select",id:"taxonomy-select",onChange:function(t){e.onChange(t.target.value),r(t.target.value)}},wp.element.createElement("option",ue()({},e.selected?"":"selected",{disabled:!0,value:!0})," ","-- select an option --"," "),wp.element.createElement("option",{value:"industry"},"Industry"),wp.element.createElement("option",{value:"topic"},"Topic")))},de=wp.element,he=de.useState,ye=de.useEffect,ve=function(e){var t=wp.element.createElement("div",{className:"placeholder-grid flex col full"},wp.element.createElement("div",{className:"row-1 flex row jfsb"},wp.element.createElement("article",{className:"post"}),wp.element.createElement("article",{className:"post"}),wp.element.createElement("article",{className:"post"})),wp.element.createElement("div",{className:"row-2 flex row jfsb"},wp.element.createElement("article",{className:"post"}),wp.element.createElement("article",{className:"post"}),wp.element.createElement("article",{className:"post"}))),n=he("industry"),r=c()(n,2),o=r[0],a=r[1],i=he(t),l=c()(i,2),u=l[0],s=l[1],f=function(t){var n;"industry"===e.tax?n=2:"categories"===e.tax&&(a("categories"),n=1);var r=function(e){var t=function(e){return window.fetch("".concat(e.rest)).then((function(e){return e.json()})).then((function(e){return console.log(e),function(e){return{author:e.author}}(e)}))}({rest:e._links["wp:featuredmedia"][0].href});console.log(t)},c=t.slice(0,n).map((function(e){return r(e),wp.element.createElement("article",{className:"post"},e.title.rendered)})),i=t.slice(n,t.length-1).map((function(e){return r(e),wp.element.createElement("article",{className:"post"},e.title.rendered)}));return wp.element.createElement("div",{className:"flex col full ".concat(o)},wp.element.createElement("div",{className:"row-1 flex row jfsb"},c),wp.element.createElement("div",{className:"row-2 flex row jfsb"},i))};return ye((function(){e.posts.length&&s(f(e.posts))}),[e.posts]),u},we=(n(68),n(69),n(70),function(e){var t=document.querySelector(".slide-container"),n=parseInt(t.style.top),r=document.querySelector(".active-slide"),o=r.previousSibling,a=r.nextSibling;"up"==e&&a?(t.style.top="".concat(n-200,"px"),r.classList.remove("active-slide"),a.classList.add("active-slide")):"down"==e&&o&&(t.style.top="".concat(n+200,"px"),r.classList.remove("active-slide"),o.classList.add("active-slide"))}),ge=function(e){var t=e.which||e.keyCode;38===t?we("up"):40===t&&we("down")},be=wp.element,xe=be.useState,Ee=be.useEffect,_e=function(e){var t=xe("slide"),n=c()(t,2),r=n[0],o=n[1],a=xe({}),i=c()(a,2),l=i[0],u=i[1];return Ee((function(){e.active&&(o("slide active-slide"),u({backgroundImage:e.background})),document.addEventListener("keydown",ge)}),[e.active]),Ee((function(){var e=document.querySelector(".active-slide");if(e){var t=e.offsetTop;document.querySelector(".slide-container").style.top="-".concat(t,"px")}}),[r]),wp.element.createElement("div",{className:r,style:l},e.name,wp.element.createElement("a",{href:e.link,className:"slide-button"},"Explore Industry"))},ke=function(e){return wp.element.createElement("section",{className:"scroll-picker ".concat(e.type," ").concat(e.active)},wp.element.createElement("div",{className:"active-window"},wp.element.createElement("div",{className:"slide-container"},e.terms.map((function(t){var n=!1;parseInt(e.selectedTerm)==t.id&&(n=!0);var r={active:n,name:t.name};return wp.element.createElement(_e,r)})))))},Se=wp.element.useState,Ne=wp.i18n.__;(0,wp.blocks.registerBlockType)("ctct-bcb/tax-masonry-feed",{title:Ne("Home – Taxonomy Masonry Feed"),icon:"yes-alt",category:"common",edit:function(e){var t=e.attributes,n=e.setAttributes;console.log("attributes",t);var r=Se([]),o=c()(r,2),a=o[0],i=o[1],l=Se([]),u=c()(l,2),s=u[0],f=u[1],p=Se(null),m=c()(p,2),d=m[0],h=m[1],y=Se(null),v=c()(y,2),w=v[0],g=v[1],b=Se(""),x=c()(b,2),E=x[0],_=x[1],k=Se(!0),S=c()(k,2),N=(S[0],S[1]),T=function(e,t,n){g(n),i(e),_(t),N(!1)},j=function(){var e=X()(ee.a.mark((function e(t){return ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("industry"!==t){e.next=4;break}return e.abrupt("return",te().then((function(e){T(e,"Industry:","industry"),n({termList:e,selectedTax:"industry",curTaxTitle:"Industry:"})})));case 4:if("topic"!==t){e.next=6;break}return e.abrupt("return",ne().then((function(e){T(e,"Marketing Advice by Topic:","categories"),n({termList:e,selectedTax:"categories",curTaxTitle:"Marketing Advice by Topic:"})})));case 6:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),L=function(){var e=X()(ee.a.mark((function e(t,r){return ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return h(r),e.abrupt("return",re({rest:t,tax:w}).then((function(e){f(e),n({posts:e,selectedTerm:r})})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),C={selected:{value:t.selectedTax,title:t.curTaxTitle}||!1,onChange:j},O={terms:t.termList||a,taxType:t.curTaxTitle||E,selectedTerm:t.selectedTerm||!1,onChange:L},P={posts:t.posts||s,tax:t.selectedTax||w},I={posts:s||t.posts.map((function(e){return{id:e.id,title:e.title.rendered,link:e.link,author:e.author,image:e._links["wp:featuredmedia"][0].href}})),tax:t.selectedTax||w};console.log("tax props",O);var R={terms:t.termList||a,type:w,active:!1,selectedTerm:t.selectedTerm||d},A=wp.element.createElement("div",null,wp.element.createElement(me,C),wp.element.createElement("section",{className:"taxFeed-block-wrap flex col afs jfs"},wp.element.createElement(ie,O),wp.element.createElement(ke,R),wp.element.createElement(ve,P)));return n({markup:JSON.stringify({selectTaxProps:C,taxProps:O,slideProps:R,gridProps:I})}),A},save:function(){return null}})},function(e,t){},,function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,